{
  "queries": [
    {
      "name": "Find all active Global Administrators",
      "category": "Entra ID - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p =(n)-[:AZGlobalAdmin]->(:AZTenant) RETURN p"
        }
      ]
    },
    {
      "name": "Find all active sensitive non-M365 Entra ID Administrators (last updated: 2024-01-24)",
      "category": "Entra ID - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[:AZHasRole|AZMemberOf*1..2]->(r:AZRole WHERE r.displayname =~ '(?i)Application Administrator|Authentication Administrator|Authentication Policy Administrator|Azure DevOps Administrator|Azure Information Protection Administrator|B2C IEF Keyset Administrator|Cloud Application Administrator|Cloud Device Administrator|Conditional Access Administrator|Directory Writers|External Identity Provider Administrator|Global Administrator|Groups Administrator|Helpdesk Administrator|Hybrid Identity Administrator|Intune Administrator|Microsoft Entra Joined Device Local Administrator|Partner Tier1 Support|Partner Tier2 Support|Password Administrator|Privileged Authentication Administrator|Privileged Role Administrator|User Administrator|Windows 365 Administrator') RETURN p"
        }
      ]
    },
    {
      "name": "Find all active M365 Administrators (last updated: 2024-01-24)",
      "category": "Entra ID - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[:AZHasRole|AZMemberOf*1..2]->(r:AZRole WHERE r.displayname =~ '(?i)Dynamics 365 Administrator|Exchange Administrator|Fabric Administrator|Kaizala Administrator|Power Platform Administrator|SharePoint Administrator|Skype for Business Administrator|Teams Administrator|Viva Goals Administrator|Viva Pulse Administrator|Yammer Administrator') RETURN p"
        }
      ]
    },
    {
      "name": "Find all groups with an active Entra ID role",
      "category": "Entra ID - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (m:AZGroup)-[r:AZHasRole]->(n:AZRole) RETURN p"
        }
      ]
    },
    {
      "name": "Find all groups with a potentially eligible Entra ID role",
      "category": "Entra ID - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (g:AZGroup {isassignabletorole: True}) RETURN g"
        }
      ]
    },
    {
      "name": "Find all dynamic groups with an active Entra ID role",
      "category": "Entra ID - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (g) WHERE EXISTS(g.membershipRule) MATCH p = (g)-[r:AZHasRole]->(n:AZRole) RETURN p"
        }
      ]
    },
    {
      "name": "Find all dynamic groups",
      "category": "Entra ID - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (g) WHERE EXISTS(g.membershipRule) RETURN g"
        }
      ]
    },
    {
      "name": "Find all identities with an active Entra ID Role",
      "category": "Entra ID - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[:AZHasRole|AZMemberOf*1..2]->(r:AZRole WHERE r.displayname CONTAINS('Administrator')) RETURN p"
        }
      ]
    },
    {
      "name": "Find all owners of Entra ID Applications",
      "category": "Entra ID - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[r:AZOwns]->(g:AZApp) RETURN p"
        }
      ]
    },
    {
      "name": "Find all SPs with an Entra ID role",
      "category": "Entra ID - Service Principals",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (sps_excluding_builtin) WHERE (sps_excluding_builtin:AZServicePrincipal AND sps_excluding_builtin.serviceprincipaltype = 'Application' AND NOT (sps_excluding_builtin.displayname STARTS WITH 'pim' or sps_excluding_builtin.displayname starts with 'policy-')) MATCH p = (sps_excluding_builtin)-[:AZHasRole]->(:AZRole) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all SPs with a Tier-0 application permission",
      "category": "Entra ID - Service Principals",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (sps_excluding_builtin) WHERE (sps_excluding_builtin:AZServicePrincipal AND sps_excluding_builtin.serviceprincipaltype = 'Application' AND NOT (sps_excluding_builtin.displayname STARTS WITH 'pim' or sps_excluding_builtin.displayname starts with 'policy-')) MATCH p = (sps_excluding_builtin)-[entra_app_permissions_t0:AZMGApplication_ReadWrite_All|AZMGAppRoleAssignment_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGGrantRole|AZMGServicePrincipalEndpoint_ReadWrite_All|AZMGGrantAppRoles]->(n) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all SPs with a Tier-1 application permission",
      "category": "Entra ID - Service Principals",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (sps_excluding_builtin) WHERE (sps_excluding_builtin:AZServicePrincipal AND sps_excluding_builtin.serviceprincipaltype = 'Application' AND NOT (sps_excluding_builtin.displayname STARTS WITH 'pim' or sps_excluding_builtin.displayname starts with 'policy-')) MATCH p = (sps_excluding_builtin)-[entra_app_permissions_t1:]->(n) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with an abusable permission on MS Graph",
      "category": "Entra ID - Service Principals",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[r:AZAddOwner|AZAddSecret|AZAppAdmin|AZCloudAppAdmin|AZMGAddOwner|AZMGAddSecret|AZOwns]->(:AZServicePrincipal {appdisplayname: \"Microsoft Graph\"}) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all SPs with Azure permissions on Management Groups",
      "category": "Azure - Service Principals",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (sps_excluding_builtin) WHERE (sps_excluding_builtin:AZServicePrincipal AND sps_excluding_builtin.serviceprincipaltype = 'Application' AND NOT (sps_excluding_builtin.displayname STARTS WITH 'pim' or sps_excluding_builtin.displayname starts with 'policy-')) MATCH p = (sps_excluding_builtin)-[r]->(:AZManagementGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all SPs with Azure permissions on Subscriptions",
      "category": "Azure - Service Principals",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (sps_excluding_builtin) WHERE (sps_excluding_builtin:AZServicePrincipal AND sps_excluding_builtin.serviceprincipaltype = 'Application' AND NOT (sps_excluding_builtin.displayname STARTS WITH 'pim' or sps_excluding_builtin.displayname starts with 'policy-')) MATCH p = (sps_excluding_builtin)-[r]->(:AZSubscription) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all SPs with Azure permissions on Resource Groups",
      "category": "Azure - Service Principals",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (sps_excluding_builtin) WHERE (sps_excluding_builtin:AZServicePrincipal AND sps_excluding_builtin.serviceprincipaltype = 'Application' AND NOT (sps_excluding_builtin.displayname STARTS WITH 'pim' or sps_excluding_builtin.displayname starts with 'policy-')) MATCH p = (sps_excluding_builtin)-[r]->(:AZResourceGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all SPs with Azure permissions on individual resources",
      "category": "Azure - Service Principals",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (sps_excluding_builtin) WHERE (sps_excluding_builtin:AZServicePrincipal AND sps_excluding_builtin.serviceprincipaltype = 'Application' AND NOT (sps_excluding_builtin.displayname STARTS WITH 'pim' or sps_excluding_builtin.displayname starts with 'policy-')) MATCH (all_az_resources) WHERE (all_az_resources:AZAutomationAccount or all_az_resources:AZContainerRegistry or all_az_resources:AZFunctionApp or all_az_resources:AZKeyVault or all_az_resources:AZLogicApp or all_az_resources:AZManagedCluster or all_az_resources:AZVM or all_az_resources:AZVMScaleSet or all_az_resources:AZWebApp) MATCH p = (sps_excluding_builtin)-[r]->(all_az_resources) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all SPs with access to a Key Vault's data plane",
      "category": "Azure - Service Principals",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (node) WHERE (node:AZServicePrincipal AND node.serviceprincipaltype = 'Application') MATCH p = (node)-[r:AZKeyVaultContributor|AZGetCertificates|AZGetKeys|AZGetSecrets]->(:AZKeyVault) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Entra ID Users with a Path to High Value Targets",
      "category": "Entra ID - Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:AZUser),(n {highvalue:true}),p=shortestPath((m)-[r*1..]->(n)) WHERE NONE (r IN relationships(p) WHERE type(r)= \"GetChanges\") AND NONE (r in relationships(p) WHERE type(r)=\"GetChangesAll\") AND NOT m=n RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Entra ID users synchronized from on-prem AD with a Path to High Value Targets",
      "category": "Entra ID - Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:AZUser WHERE m.onpremisesyncenabled = true),(n {highvalue:true}),p=shortestPath((m)-[r*1..]->(n)) WHERE NONE (r IN relationships(p) WHERE type(r)= \"GetChanges\") AND NONE (r in relationships(p) WHERE type(r)=\"GetChangesAll\") AND NOT m=n RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find shortest Paths to High Value Entra ID Roles",
      "category": "Entra ID - Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:AZRole WHERE n.displayname =~ '(?i)Global Administrator|Privileged Role Administrator|Privileged Authentication Administrator|Application Administrator|Cloud Application Administrator|User Administrator|Authentication Policy Administrator|Exchange Administrator|Helpdesk Administrator|Sharepoint Administrator|Azure DevOps Administrator'), (m), p=shortestPath((m)-[r*1..]->(n)) WHERE NOT m=n RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find shortest Paths to MS Graph",
      "category": "Entra ID - Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n) WHERE NOT n.displayname=\"Microsoft Graph\" WITH n MATCH p = shortestPath((n)-[r*1..]->(g:AZServicePrincipal {appdisplayname: \"Microsoft Graph\"})) WHERE n<>g RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find Entra ID Applications with Paths to High Value Targets",
      "category": "Entra ID - Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:AZApp),(n {highvalue:true}),p=shortestPath((m)-[r*1..]->(n)) WHERE NONE (r IN relationships(p) WHERE type(r)= \"GetChanges\") AND NONE (r in relationships(p) WHERE type(r)=\"GetChangesAll\") AND NOT m=n RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find shortest Paths from Owned Users to Service Principals",
      "category": "Entra ID - Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:AZUser {owned: true}), (m:AZServicePrincipal) MATCH p = shortestPath((u)-[*..]->(m)) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find shortest Paths from Owned Users to Managed Identities",
      "category": "Entra ID - Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:AZUser {owned: true}), (m:AZServicePrincipal {serviceprincipaltype: 'ManagedIdentity'}) MATCH p = shortestPath((u)-[*..]->(m)) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find shortest Paths from all Users to Managed Identities",
      "category": "Entra ID - Paths",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:AZUser), (m:AZServicePrincipal {serviceprincipaltype: 'ManagedIdentity'}) MATCH p = shortestPath((u)-[*..]->(m)) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all users originating from on-premises with an active Entra ID role",
      "category": "Hybrid - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (node) WHERE (node.onpremisesyncenabled = true) MATCH p = (node)-[:AZHasRole|AZMemberOf*1..2]->(r:AZRole WHERE r.displayname CONTAINS('Administrator')) RETURN p"
        }
      ]
    },
    {
      "name": "Find all Synchronization accounts possibly used for Entra ID Connect",
      "category": "Hybrid - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u) WHERE (u:User OR u:AZUser) AND (u.name =~ '(?i)^MSOL_|.*AADConnect.*' OR u.userprincipalname =~ '(?i)^sync_.*') OPTIONAL MATCH (u)-[:HasSession]->(s:Session) RETURN u, s",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all users with an active Azure role",
      "category": "Azure - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_az_scopes) WHERE (all_az_scopes:AZManagementGroup or all_az_scopes:AZResourceGroup or all_az_scopes:AZSubscription or all_az_scopes:AZAutomationAccount or all_az_scopes:AZContainerRegistry or all_az_scopes:AZFunctionApp or all_az_scopes:AZKeyVault or all_az_scopes:AZLogicApp or all_az_scopes:AZManagedCluster or all_az_scopes:AZVM or all_az_scopes:AZVMScaleSet or all_az_scopes:AZWebApp) MATCH p = (:AZUser)-[r]->(all_az_scopes) RETURN p"
        }
      ]
    },
    {
      "name": "Find all non-admin users with an active Azure role on a high scope",
      "category": "Azure - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (highlevel_az_scopes) WHERE (highlevel_az_scopes:AZManagementGroup or highlevel_az_scopes:AZResourceGroup or highlevel_az_scopes:AZSubscription) MATCH (non_admin_users) WHERE (non_admin_users:AZUser AND NOT non_admin_users.displayname =~ '(?i).*admin.*' AND NOT non_admin_users.displayname =~ '(?i).*emergency.*') MATCH p = (non_admin_users)-[r]->(highlevel_az_scopes) RETURN p"
        }
      ]
    },
    {
      "name": "Find all non-admin users with an active Azure role on an individual resource that is not a VM",
      "category": "Azure - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_az_resources_excluding_vms) WHERE (all_az_resources_excluding_vms:AZAutomationAccount or all_az_resources_excluding_vms:AZContainerRegistry or all_az_resources_excluding_vms:AZFunctionApp or all_az_resources_excluding_vms:AZKeyVault or all_az_resources_excluding_vms:AZLogicApp or all_az_resources_excluding_vms:AZManagedCluster or all_az_resources_excluding_vms:AZVMScaleSet or all_az_resources_excluding_vms:AZWebApp) MATCH (non_admin_users) WHERE (non_admin_users:AZUser AND NOT non_admin_users.displayname =~ '(?i).*admin.*' AND NOT non_admin_users.displayname =~ '(?i).*emergency.*') MATCH p = (non_admin_users)-[r]->(all_az_resources_excluding_vms) RETURN p"
        }
      ]
    },
    {
      "name": "Find all groups with an active Azure role",
      "category": "Azure - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_az_scopes) WHERE (all_az_scopes:AZManagementGroup or all_az_scopes:AZResourceGroup or all_az_scopes:AZSubscription or all_az_scopes:AZAutomationAccount or all_az_scopes:AZContainerRegistry or all_az_scopes:AZFunctionApp or all_az_scopes:AZKeyVault or all_az_scopes:AZLogicApp or all_az_scopes:AZManagedCluster or all_az_scopes:AZVM or all_az_scopes:AZVMScaleSet or all_az_scopes:AZWebApp) MATCH p = (:AZGroup)-[r]->(all_az_scopes) RETURN p"
        }
      ]
    },
    {
      "name": "Find all dynamic groups with an active Azure role",
      "category": "Azure - General",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (g) WHERE EXISTS(g.membershipRule) MATCH (all_az_scopes) WHERE (all_az_scopes:AZManagementGroup or all_az_scopes:AZResourceGroup or all_az_scopes:AZSubscription or all_az_scopes:AZAutomationAccount or all_az_scopes:AZContainerRegistry or all_az_scopes:AZFunctionApp or all_az_scopes:AZKeyVault or all_az_scopes:AZLogicApp or all_az_scopes:AZManagedCluster or all_az_scopes:AZVM or all_az_scopes:AZVMScaleSet or all_az_scopes:AZWebApp) MATCH p = (g)-[r]->(all_az_scopes) RETURN p"
        }
      ]
    },
    {
      "name": "Find all MIs with an Entra ID role",
      "category": "Azure - Managed Identities",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (mis_excluding_builtin) WHERE (mis_excluding_builtin:AZServicePrincipal AND mis_excluding_builtin.serviceprincipaltype = 'ManagedIdentity' AND NOT (mis_excluding_builtin.displayname STARTS WITH 'pim' or mis_excluding_builtin.displayname starts with 'policy-')) MATCH p = (mis_excluding_builtin)-[:AZHasRole]->(:AZRole) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all MIs with a Tier-0 application permission",
      "category": "Azure - Managed Identities",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (mis_excluding_builtin) WHERE (mis_excluding_builtin:AZServicePrincipal AND mis_excluding_builtin.serviceprincipaltype = 'ManagedIdentity' AND NOT (mis_excluding_builtin.displayname STARTS WITH 'pim' or mis_excluding_builtin.displayname starts with 'policy-')) MATCH p = (mis_excluding_builtin)-[entra_app_permissions_t0:AZMGApplication_ReadWrite_All|AZMGAppRoleAssignment_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGGrantRole|AZMGServicePrincipalEndpoint_ReadWrite_All|AZMGGrantAppRoles]->(n) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all MIs with a Tier-1 application permission",
      "category": "Azure - Managed Identities",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (mis_excluding_builtin) WHERE (mis_excluding_builtin:AZServicePrincipal AND mis_excluding_builtin.serviceprincipaltype = 'ManagedIdentity' AND NOT (mis_excluding_builtin.displayname STARTS WITH 'pim' or mis_excluding_builtin.displayname starts with 'policy-')) MATCH p = (mis_excluding_builtin)-[entra_app_permissions_t1:]->(n) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all MIs with Azure permissions on Management Groups",
      "category": "Azure - Managed Identities",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (mis_excluding_builtin) WHERE (mis_excluding_builtin:AZServicePrincipal AND mis_excluding_builtin.serviceprincipaltype = 'ManagedIdentity' AND NOT (mis_excluding_builtin.displayname STARTS WITH 'pim' or mis_excluding_builtin.displayname starts with 'policy-')) MATCH p = (mis_excluding_builtin)-[r]->(:AZManagementGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all MIs with Azure permissions on Subscriptions",
      "category": "Azure - Managed Identities",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (mis_excluding_builtin) WHERE (mis_excluding_builtin:AZServicePrincipal AND mis_excluding_builtin.serviceprincipaltype = 'ManagedIdentity' AND NOT (mis_excluding_builtin.displayname STARTS WITH 'pim' or mis_excluding_builtin.displayname starts with 'policy-')) MATCH p = (mis_excluding_builtin)-[r]->(:AZSubscription) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all MIs with Azure permissions on Resource Groups",
      "category": "Azure - Managed Identities",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (mis_excluding_builtin) WHERE (mis_excluding_builtin:AZServicePrincipal AND mis_excluding_builtin.serviceprincipaltype = 'ManagedIdentity' AND NOT (mis_excluding_builtin.displayname STARTS WITH 'pim' or mis_excluding_builtin.displayname starts with 'policy-')) MATCH p = (mis_excluding_builtin)-[r]->(:AZResourceGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all MIs with Azure permissions on individual resources",
      "category": "Azure - Managed Identities",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (mis_excluding_builtin) WHERE (mis_excluding_builtin:AZServicePrincipal AND mis_excluding_builtin.serviceprincipaltype = 'ManagedIdentity' AND NOT (mis_excluding_builtin.displayname STARTS WITH 'pim' or mis_excluding_builtin.displayname starts with 'policy-')) MATCH (all_az_resources) WHERE (all_az_resources:AZAutomationAccount or all_az_resources:AZContainerRegistry or all_az_resources:AZFunctionApp or all_az_resources:AZKeyVault or all_az_resources:AZLogicApp or all_az_resources:AZManagedCluster or all_az_resources:AZVM or all_az_resources:AZVMScaleSet or all_az_resources:AZWebApp) MATCH p = (mis_excluding_builtin)-[r]->(all_az_resources) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find shortest Paths from Azure Users to subscription",
      "category": "Azure - Paths (OLD)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:AZUser) WITH n MATCH p = shortestPath((n)-[r*1..]->(g:AZSubscription)) RETURN p"
        }
      ]
    },
    {
      "name": "Find shortest Path from Owned Azure Users to VMs",
      "category": "Azure - Paths (OLD)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:AZVM) MATCH p = shortestPath((m:AZUser{owned: true})-[*..]->(n)) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Paths to Azure KeyVaults from Owned Principals",
      "category": "Azure - Paths (OLD)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = ({owned: true})-[r]->(g:AZKeyVault) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find shortest Paths to Azure subscription",
      "category": "Azure - Paths (OLD)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:AZSubscription), (m), p=shortestPath((m)-[r*1..]->(n)) WHERE NOT m=n RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an AKS cluster that has an MI with an Entra ID role",
      "category": "Azure - Kubernetes Service (AKS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZManagedCluster)-[:AZManagedIdentity]-(n1)-[:AZHasRole]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an AKS cluster that has an MI with a Tier-0 application permission",
      "category": "Azure - Kubernetes Service (AKS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZManagedCluster)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t0:AZMGApplication_ReadWrite_All|AZMGAppRoleAssignment_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGGrantRole|AZMGServicePrincipalEndpoint_ReadWrite_All|AZMGGrantAppRoles]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an AKS cluster that has an MI with a Tier-1 application permission",
      "category": "Azure - Kubernetes Service (AKS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZManagedCluster)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t1:]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an AKS cluster that has an MI with a Tier-0 Azure role",
      "category": "Azure - Kubernetes Service (AKS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZManagedCluster)-[:AZManagedIdentity]-(n)-[azure_roles_t0:AZOwns|AZContributor|AZAutomationContributor|AZAKSContributor|AZAvereContributor|AZLogicAppContributor|AZVMContributor|AZWebsiteContributor|AZVMAdminLogin|AZUserAccessAdministrator]->(n3) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an App Service that has an MI with access to a Key Vault's data plane",
      "category": "Azure - Kubernetes Service (AKS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZManagedCluster)-[:AZManagedIdentity]-(n)-[kv_access:AZKeyVaultContributor|AZGetCertificates|AZGetKeys|AZGetSecrets]->(:AZKeyVault) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all AKS clusters with an MI that has permissions on Management Groups",
      "category": "Azure - Kubernetes Service (AKS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZManagedCluster)-[:AZManagedIdentity]-(n)-[r]->(:AZManagementGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all AKS clusters with an MI that has permissions on Subscriptions",
      "category": "Azure - Kubernetes Service (AKS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZManagedCluster)-[:AZManagedIdentity]-(n)-[r]->(:AZSubscription) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all AKS clusters with an MI that has permissions on Resource Groups",
      "category": "Azure - Kubernetes Service (AKS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZManagedCluster)-[:AZManagedIdentity]-(n)-[r]->(:AZResourceGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all AKS clusters with an MI that has permissions on individual resources",
      "category": "Azure - Kubernetes Service (AKS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_az_resources) WHERE (all_az_resources:AZAutomationAccount or all_az_resources:AZContainerRegistry or all_az_resources:AZFunctionApp or all_az_resources:AZKeyVault or all_az_resources:AZLogicApp or all_az_resources:AZManagedCluster or all_az_resources:AZVM or all_az_resources:AZVMScaleSet or all_az_resources:AZWebApp) MATCH p = (:AZManagedCluster)-[:AZManagedIdentity]-(n)-[r]->(all_az_resources) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an App Service that has an MI with an Entra ID role",
      "category": "Azure - App Service",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZWebApp)-[:AZManagedIdentity]-(n1)-[:AZHasRole]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an App Service that has an MI with a Tier-0 application permission",
      "category": "Azure - App Service",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZWebApp)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t0:AZMGApplication_ReadWrite_All|AZMGAppRoleAssignment_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGGrantRole|AZMGServicePrincipalEndpoint_ReadWrite_All|AZMGGrantAppRoles]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an App Service that has an MI with a Tier-1 application permission",
      "category": "Azure - App Service",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZWebApp)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t1:]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an App Service that has an MI with a Tier-0 Azure role",
      "category": "Azure - App Service",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZWebApp)-[:AZManagedIdentity]-(n)-[azure_roles_t0:AZOwns|AZContributor|AZAutomationContributor|AZAKSContributor|AZAvereContributor|AZLogicAppContributor|AZVMContributor|AZWebsiteContributor|AZVMAdminLogin|AZUserAccessAdministrator]->(n3) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an App Service that has an MI with access to a Key Vault's data plane",
      "category": "Azure - App Service",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZWebApp)-[:AZManagedIdentity]-(n)-[kv_access:AZKeyVaultContributor|AZGetCertificates|AZGetKeys|AZGetSecrets]->(:AZKeyVault) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all App Services with an MI that has permissions on Management Groups",
      "category": "Azure - App Service",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZWebApp)-[:AZManagedIdentity]-(n)-[r]->(:AZManagementGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all App Services with an MI that has permissions on Subscriptions",
      "category": "Azure - App Service",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZWebApp)-[:AZManagedIdentity]-(n)-[r]->(:AZSubscription) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all App Services with an MI that has permissions on Resource Groups",
      "category": "Azure - App Service",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZWebApp)-[:AZManagedIdentity]-(n)-[r]->(:AZResourceGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all App Services with an MI that has permissions on individual resources",
      "category": "Azure - App Service",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_az_resources) WHERE (all_az_resources:AZAutomationAccount or all_az_resources:AZContainerRegistry or all_az_resources:AZFunctionApp or all_az_resources:AZKeyVault or all_az_resources:AZLogicApp or all_az_resources:AZManagedCluster or all_az_resources:AZVM or all_az_resources:AZVMScaleSet or all_az_resources:AZWebApp) MATCH p = (:AZWebApp)-[:AZManagedIdentity]-(n)-[r]->(all_az_resources) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an Automation Account that has an MI with an Entra ID role",
      "category": "Azure - Automation Account",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZAutomationAccount)-[:AZManagedIdentity]-(n1)-[:AZHasRole]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an Automation Account that has an MI with a Tier-0 application permission",
      "category": "Azure - Automation Account",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZAutomationAccount)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t0:AZMGApplication_ReadWrite_All|AZMGAppRoleAssignment_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGGrantRole|AZMGServicePrincipalEndpoint_ReadWrite_All|AZMGGrantAppRoles]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an Automation Account that has an MI with a Tier-1 application permission",
      "category": "Azure - Automation Account",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZAutomationAccount)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t1:]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an Automation Account that has an MI with a Tier-0 Azure role",
      "category": "Azure - Automation Account",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZAutomationAccount)-[:AZManagedIdentity]-(n)-[azure_roles_t0:AZOwns|AZContributor|AZAutomationContributor|AZAKSContributor|AZAvereContributor|AZLogicAppContributor|AZVMContributor|AZWebsiteContributor|AZVMAdminLogin|AZUserAccessAdministrator]->(n3) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a direct Tier-0 Azure role to an Automation Account",
      "category": "Azure - Automation Account",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(all_principals_excluding_builtin)-[azure_roles_t0:AZOwns|AZContributor|AZAutomationContributor|AZAKSContributor|AZAvereContributor|AZLogicAppContributor|AZVMContributor|AZWebsiteContributor|AZVMAdminLogin|AZUserAccessAdministrator]->(:AZAutomationAccount) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an Automation Account that has an MI with access to a Key Vault's data plane",
      "category": "Azure - Automation Account",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZAutomationAccount)-[:AZManagedIdentity]-(n)-[kv_access:AZKeyVaultContributor|AZGetCertificates|AZGetKeys|AZGetSecrets]->(:AZKeyVault) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Automation Accounts with an MI that has permissions on Management Groups",
      "category": "Azure - Automation Account",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZAutomationAccount)-[:AZManagedIdentity]-(n)-[r]->(:AZManagementGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Automation Accounts with an MI that has permissions on Subscriptions",
      "category": "Azure - Automation Account",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZAutomationAccount)-[:AZManagedIdentity]-(n)-[r]->(:AZSubscription) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Automation Accounts with an MI that has permissions on Resource Groups",
      "category": "Azure - Automation Account",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZAutomationAccount)-[:AZManagedIdentity]-(n)-[r]->(:AZResourceGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Automation Accounts with an MI that has permissions on individual resources",
      "category": "Azure - Automation Account",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_az_resources) WHERE (all_az_resources:AZAutomationAccount or all_az_resources:AZContainerRegistry or all_az_resources:AZFunctionApp or all_az_resources:AZKeyVault or all_az_resources:AZLogicApp or all_az_resources:AZManagedCluster or all_az_resources:AZVM or all_az_resources:AZVMScaleSet or all_az_resources:AZWebApp) MATCH p = (:AZAutomationAccount)-[:AZManagedIdentity]-(n)-[r]->(all_az_resources) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an ACR that has an MI with an Entra ID role",
      "category": "Azure - Container Registry (ACR)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZContainerRegistry)-[:AZManagedIdentity]-(n1)-[:AZHasRole]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an ACR that has an MI with a Tier-0 application permission",
      "category": "Azure - Container Registry (ACR)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZContainerRegistry)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t0:AZMGApplication_ReadWrite_All|AZMGAppRoleAssignment_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGGrantRole|AZMGServicePrincipalEndpoint_ReadWrite_All|AZMGGrantAppRoles]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an ACR that has an MI with a Tier-1 application permission",
      "category": "Azure - Container Registry (ACR)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZContainerRegistry)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t1:]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an ACR that has an MI with a Tier-0 Azure role",
      "category": "Azure - Container Registry (ACR)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZContainerRegistry)-[:AZManagedIdentity]-(n)-[azure_roles_t0:AZOwns|AZContributor|AZAutomationContributor|AZAKSContributor|AZAvereContributor|AZLogicAppContributor|AZVMContributor|AZWebsiteContributor|AZVMAdminLogin|AZUserAccessAdministrator]->(n3) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an ACR that has an MI with access to a Key Vault's data plane",
      "category": "Azure - Container Registry (ACR)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZContainerRegistry)-[:AZManagedIdentity]-(n)-[kv_access:AZKeyVaultContributor|AZGetCertificates|AZGetKeys|AZGetSecrets]->(:AZKeyVault) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all ACRs with an MI that has permissions on Management Groups",
      "category": "Azure - Container Registry (ACR)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZContainerRegistry)-[:AZManagedIdentity]-(n)-[r]->(:AZManagementGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all ACRs with an MI that has permissions on Subscriptions",
      "category": "Azure - Container Registry (ACR)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZContainerRegistry)-[:AZManagedIdentity]-(n)-[r]->(:AZSubscription) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all ACRs with an MI that has permissions on Resource Groups",
      "category": "Azure - Container Registry (ACR)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZContainerRegistry)-[:AZManagedIdentity]-(n)-[r]->(:AZResourceGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all ACRs with an MI that has permissions on individual resources",
      "category": "Azure - Container Registry (ACR)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_az_resources) WHERE (all_az_resources:AZAutomationAccount or all_az_resources:AZContainerRegistry or all_az_resources:AZFunctionApp or all_az_resources:AZKeyVault or all_az_resources:AZLogicApp or all_az_resources:AZManagedCluster or all_az_resources:AZVM or all_az_resources:AZVMScaleSet or all_az_resources:AZWebApp) MATCH p = (:AZContainerRegistry)-[:AZManagedIdentity]-(n)-[r]->(all_az_resources) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a Function App that has an MI with an Entra ID role",
      "category": "Azure - Function App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZFunctionApp)-[:AZManagedIdentity]-(n1)-[:AZHasRole]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a Function App that has an MI with a Tier-0 application permission",
      "category": "Azure - Function App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZFunctionApp)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t0:AZMGApplication_ReadWrite_All|AZMGAppRoleAssignment_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGGrantRole|AZMGServicePrincipalEndpoint_ReadWrite_All|AZMGGrantAppRoles]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a Function App that has an MI with a Tier-1 application permission",
      "category": "Azure - Function App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZFunctionApp)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t1:]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a Function App that has an MI with a Tier-0 Azure role",
      "category": "Azure - Function App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZFunctionApp)-[:AZManagedIdentity]-(n)-[azure_roles_t0:AZOwns|AZContributor|AZAutomationContributor|AZAKSContributor|AZAvereContributor|AZLogicAppContributor|AZVMContributor|AZWebsiteContributor|AZVMAdminLogin|AZUserAccessAdministrator]->(n3) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to an Function App that has an MI with access to a Key Vault's data plane",
      "category": "Azure - Function App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZFunctionApp)-[:AZManagedIdentity]-(n)-[kv_access:AZKeyVaultContributor|AZGetCertificates|AZGetKeys|AZGetSecrets]->(:AZKeyVault) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Function Apps with an MI that has permissions on Management Groups",
      "category": "Azure - Function App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZFunctionApp)-[:AZManagedIdentity]-(n)-[r]->(:AZManagementGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Function Apps with an MI that has permissions on Subscriptions",
      "category": "Azure - Function App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZFunctionApp)-[:AZManagedIdentity]-(n)-[r]->(:AZSubscription) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Function Apps with an MI that has permissions on Resource Groups",
      "category": "Azure - Function App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZFunctionApp)-[:AZManagedIdentity]-(n)-[r]->(:AZResourceGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Function Apps with an MI that has permissions on individual resources",
      "category": "Azure - Function App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_az_resources) WHERE (all_az_resources:AZAutomationAccount or all_az_resources:AZContainerRegistry or all_az_resources:AZFunctionApp or all_az_resources:AZKeyVault or all_az_resources:AZLogicApp or all_az_resources:AZManagedCluster or all_az_resources:AZVM or all_az_resources:AZVMScaleSet or all_az_resources:AZWebApp) MATCH p = (:AZFunctionApp)-[:AZManagedIdentity]-(n)-[r]->(all_az_resources) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a Logic App that has an MI with an Entra ID role",
      "category": "Azure - Logic App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZLogicApp)-[:AZManagedIdentity]-(n1)-[:AZHasRole]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a Logic App that has an MI with a Tier-0 application permission",
      "category": "Azure - Logic App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZLogicApp)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t0:AZMGApplication_ReadWrite_All|AZMGAppRoleAssignment_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGGrantRole|AZMGServicePrincipalEndpoint_ReadWrite_All|AZMGGrantAppRoles]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a Logic App that has an MI with a Tier-1 application permission",
      "category": "Azure - Logic App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZLogicApp)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t1:]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a Logic App that has an MI with a Tier-0 Azure role",
      "category": "Azure - Logic App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZLogicApp)-[:AZManagedIdentity]-(n)-[azure_roles_t0:AZOwns|AZContributor|AZAutomationContributor|AZAKSContributor|AZAvereContributor|AZLogicAppContributor|AZVMContributor|AZWebsiteContributor|AZVMAdminLogin|AZUserAccessAdministrator]->(n3) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a Logic App that has an MI with access to a Key Vault's data plane",
      "category": "Azure - Logic App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZLogicApp)-[:AZManagedIdentity]-(n)-[kv_access:AZKeyVaultContributor|AZGetCertificates|AZGetKeys|AZGetSecrets]->(:AZKeyVault) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Logic Apps with an MI that has permissions on Management Groups",
      "category": "Azure - Logic App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZLogicApp)-[:AZManagedIdentity]-(n)-[r]->(:AZManagementGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Logic Apps with an MI that has permissions on Subscriptions",
      "category": "Azure - Logic App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZLogicApp)-[:AZManagedIdentity]-(n)-[r]->(:AZSubscription) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Logic Apps with an MI that has permissions on Resource Groups",
      "category": "Azure - Logic App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZLogicApp)-[:AZManagedIdentity]-(n)-[r]->(:AZResourceGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all Logic Apps with an MI that has permissions on individual resources",
      "category": "Azure - Logic App",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_az_resources) WHERE (all_az_resources:AZAutomationAccount or all_az_resources:AZContainerRegistry or all_az_resources:AZFunctionApp or all_az_resources:AZKeyVault or all_az_resources:AZLogicApp or all_az_resources:AZManagedCluster or all_az_resources:AZVM or all_az_resources:AZVMScaleSet or all_az_resources:AZWebApp) MATCH p = (:AZLogicApp)-[:AZManagedIdentity]-(n)-[r]->(all_az_resources) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a VM that has an MI with an Entra ID role",
      "category": "Azure - Virtual Machine (VM)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZVM)-[:AZManagedIdentity]-(n1)-[:AZHasRole]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a VM that has an MI with a Tier-0 application permission",
      "category": "Azure - Virtual Machine (VM)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZVM)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t0:AZMGApplication_ReadWrite_All|AZMGAppRoleAssignment_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGGrantRole|AZMGServicePrincipalEndpoint_ReadWrite_All|AZMGGrantAppRoles]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a VM that has an MI with a Tier-1 application permission",
      "category": "Azure - Virtual Machine (VM)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZVM)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t1:]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a VM that has an MI with a Tier-0 Azure role",
      "category": "Azure - Virtual Machine (VM)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZVM)-[:AZManagedIdentity]-(n)-[azure_roles_t0:AZOwns|AZContributor|AZAutomationContributor|AZAKSContributor|AZAvereContributor|AZLogicAppContributor|AZVMContributor|AZWebsiteContributor|AZVMAdminLogin|AZUserAccessAdministrator]->(n3) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a VM that has an MI with access to a Key Vault's data plane",
      "category": "Azure - Virtual Machine (VM)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZVM)-[:AZManagedIdentity]-(n)-[kv_access:AZKeyVaultContributor|AZGetCertificates|AZGetKeys|AZGetSecrets]->(:AZKeyVault) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all VMs with an MI that has permissions on Management Groups",
      "category": "Azure - Virtual Machine (VM)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZVM)-[:AZManagedIdentity]-(n)-[r]->(:AZManagementGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all VMs with an MI that has permissions on Subscriptions",
      "category": "Azure - Virtual Machine (VM)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZVM)-[:AZManagedIdentity]-(n)-[r]->(:AZSubscription) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all VMs with an MI that has permissions on Resource Groups",
      "category": "Azure - Virtual Machine (VM)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZVM)-[:AZManagedIdentity]-(n)-[r]->(:AZResourceGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all VMs with an MI that has permissions on individual resources",
      "category": "Azure - Virtual Machine (VM)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_az_resources) WHERE (all_az_resources:AZAutomationAccount or all_az_resources:AZContainerRegistry or all_az_resources:AZFunctionApp or all_az_resources:AZKeyVault or all_az_resources:AZLogicApp or all_az_resources:AZManagedCluster or all_az_resources:AZVM or all_az_resources:AZVMScaleSet or all_az_resources:AZWebApp) MATCH p = (:AZVM)-[:AZManagedIdentity]-(n)-[r]->(all_az_resources) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a VMSS that has an MI with an Entra ID role",
      "category": "Azure - Virtual Machine Scale Set (VMSS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZVMScaleSet)-[:AZManagedIdentity]-(n1)-[:AZHasRole]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a VMSS that has an MI with a Tier-0 application permission",
      "category": "Azure - Virtual Machine Scale Set (VMSS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZVMScaleSet)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t0:AZMGApplication_ReadWrite_All|AZMGAppRoleAssignment_ReadWrite_All|AZMGDirectory_ReadWrite_All|AZMGGroupMember_ReadWrite_All|AZMGGroup_ReadWrite_All|AZMGRoleManagement_ReadWrite_Directory|AZMGGrantRole|AZMGServicePrincipalEndpoint_ReadWrite_All|AZMGGrantAppRoles]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a VMSS that has an MI with a Tier-1 application permission",
      "category": "Azure - Virtual Machine Scale Set (VMSS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZVMScaleSet)-[:AZManagedIdentity]-(n1)-[entra_app_permissions_t1:]->(n2) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a VMSS that has an MI with a Tier-0 Azure role",
      "category": "Azure - Virtual Machine Scale Set (VMSS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZVMScaleSet)-[:AZManagedIdentity]-(n)-[azure_roles_t0:AZOwns|AZContributor|AZAutomationContributor|AZAKSContributor|AZAvereContributor|AZLogicAppContributor|AZVMContributor|AZWebsiteContributor|AZVMAdminLogin|AZUserAccessAdministrator]->(n3) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all principals with a path to a VMSS that has an MI with access to a Key Vault's data plane",
      "category": "Azure - Virtual Machine Scale Set (VMSS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_principals_excluding_builtin) WHERE (all_principals_excluding_builtin:AZGroup or (all_principals_excluding_builtin:AZServicePrincipal AND NOT (all_principals_excluding_builtin.displayname STARTS WITH 'pim' or all_principals_excluding_builtin.displayname starts with 'policy-')) or all_principals_excluding_builtin:AZUser) MATCH p=(all_principals_excluding_builtin)-[r*1..3]->(:AZVMScaleSet)-[:AZManagedIdentity]-(n)-[kv_access:AZKeyVaultContributor|AZGetCertificates|AZGetKeys|AZGetSecrets]->(:AZKeyVault) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all VMSS with an MI that has permissions on Management Groups",
      "category": "Azure - Virtual Machine Scale Set (VMSS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZVMScaleSet)-[:AZManagedIdentity]-(n)-[r]->(:AZManagementGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all VMSS with an MI that has permissions on Subscriptions",
      "category": "Azure - Virtual Machine Scale Set (VMSS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZVMScaleSet)-[:AZManagedIdentity]-(n)-[r]->(:AZSubscription) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all VMSS with an MI that has permissions on Resource Groups",
      "category": "Azure - Virtual Machine Scale Set (VMSS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (:AZVMScaleSet)-[:AZManagedIdentity]-(n)-[r]->(:AZResourceGroup) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find all VMSS with an MI that has permissions on individual resources",
      "category": "Azure - Virtual Machine Scale Set (VMSS)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (all_az_resources) WHERE (all_az_resources:AZAutomationAccount or all_az_resources:AZContainerRegistry or all_az_resources:AZFunctionApp or all_az_resources:AZKeyVault or all_az_resources:AZLogicApp or all_az_resources:AZManagedCluster or all_az_resources:AZVM or all_az_resources:AZVMScaleSet or all_az_resources:AZWebApp) MATCH p = (:AZVMScaleSet)-[:AZManagedIdentity]-(n)-[r]->(all_az_resources) RETURN p",
          "allowCollapse": true
        }
      ]
    }
  ]
}
